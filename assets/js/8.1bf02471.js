(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{354:function(e,a,n){"use strict";n.r(a);var t=n(43),r=Object(t.a)({},(function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"getting-started"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#getting-started"}},[e._v("#")]),e._v(" Getting Started")]),e._v(" "),n("h3",{attrs:{id:"install"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#install"}},[e._v("#")]),e._v(" Install")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  https://docs.docker.com/engine/install/ubuntu/\n")])])]),n("h3",{attrs:{id:"run-hello-world"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#run-hello-world"}},[e._v("#")]),e._v(" Run hello world")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker run hello-world\n")])])]),n("p",[e._v("La arquitectura de Docker funciona cliente - servidor. El cliente utiliza "),n("code",[e._v("daemon")]),e._v(" al conectarse con los contenedores.")]),e._v(" "),n("p",[e._v("Cuando ejecutamos "),n("code",[e._v("docker run hello-world")]),e._v(", el cliente de docker le dice al daemon de docker que corra un contenedor usando la descripción de hello-world; éste recibe dicho pedido, crea un contenedor si tiene dicha descripción, y si no primero trata de obtenerla. Si lo logra, crea y ejecuta el contenedor.")]),e._v(" "),n("p",[e._v("Client --\x3e  daemon --\x3e containers")]),e._v(" "),n("h2",{attrs:{id:"conceptos"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#conceptos"}},[e._v("#")]),e._v(" Conceptos")]),e._v(" "),n("h3",{attrs:{id:"contenedores"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#contenedores"}},[e._v("#")]),e._v(" Contenedores")]),e._v(" "),n("p",[e._v("Un "),n("code",[e._v("contenedor")]),e._v(" es una entidad lógica, una agrupación de procesos que se ejecutan de forma nativa como cualquier otra aplicación en la máquina host.")]),e._v(" "),n("p",[e._v("Un contenedor ejecuta sus procesos de forma nativa. Lo único que comparte el contenedor con la máquina es el "),n("code",[e._v("kernel")]),e._v(" del sistema operativo.")]),e._v(" "),n("p",[e._v("Los contenedores están aislados del sistema y a nivel de red, cada contenedor tiene su propia stack de net y sus propios puertos.")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://itnext.io/chroot-cgroups-and-namespaces-an-overview-37124d995e3d",target:"_blank",rel:"noopener noreferrer"}},[e._v("chroot, cgroups and namespaces"),n("OutboundLink")],1)]),e._v(" "),n("ul",[n("li",[e._v("Para listar todos los contenedores de Docker, utilizamos el comando:")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker ps -a\n")])])]),n("ul",[n("li",[e._v("Podemos inspeccionar un contenedor en específico utilizando:")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker inspect nombreDelContenedor\n")])])]),n("ul",[n("li",[e._v("Usando filtros")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker inspect -f '{{ json .Config.Env }}' nombreDelContenedor\n")])])]),n("ul",[n("li",[e._v("Renombrar contenedores")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker rename oldName newName\n")])])]),n("p",[e._v("no se pueden repetir los nombres pero si los id. Cada docker run genera un contenedor nuevo")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker logs nombre_contenedor\ndocker ps -aq // lista id contaniers\ndocker rm -f $(docker ps -aq) // borra dockers de la lista\n")])])]),n("ul",[n("li",[e._v("Levantar imagen de ubuntu")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker run ubuntu\ndocker run -it ubuntu // hacerlo de forma interactiva con la terminal\n")])])]),n("ul",[n("li",[e._v("Comandos dentro de la imagen ubuntu")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ls -lac\nuname -a\ncat /etc/lsb-release\nexit\n")])])]),n("ul",[n("li",[e._v("Salir imagen")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("exit\n")])])]),n("ul",[n("li",[e._v("Ejecutar comando contenedor")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker run ubuntu tail -f /dev/null\n")])])]),n("ul",[n("li",[e._v("Meterte dentro del contenedor")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker exec -it nombre_contenedor bash\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ps -fea  // ver pid\ndocker rm -f nombre_contenedor // borrar contenedor\ndocker kill nombre_contenedor // matar contenedor\n")])])]),n("h3",{attrs:{id:"exponiendo-contenedores-al-mundo-exterior"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#exponiendo-contenedores-al-mundo-exterior"}},[e._v("#")]),e._v(" Exponiendo contenedores al mundo exterior")]),e._v(" "),n("p",[e._v("Debemos redirigir los puertos del contenedor a los de la computadora y lo podemos hacer al utilizar este comando:")]),e._v(" "),n("p",[n("code",[e._v("docker run -d --name server -p 8080:00 nombreDelContenedor")])]),e._v(" "),n("p",[e._v("--detach // si tiene un proceso que tiene output, no me interesa el output")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker run -d --name server -p 8080:00  nombreDelContenedor\n\ndocker run -d --name server nginx\n\ndocker run -d --name server -p 8080:80 nginx //-p publish\n")])])]),n("h3",{attrs:{id:"levantar-base-de-datos"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#levantar-base-de-datos"}},[e._v("#")]),e._v(" Levantar base de datos")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker run -d --name db mongo\ndocker exec -it db bash\n")])])]),n("ul",[n("li",[e._v("Montar sistema de Archivos al contenedor.")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("mkdir mongodata // crear carpeta\nll //listar\npwd //encontrat directorio carpeta\ndocker run -d --name db -v directorio-mi-ordenador:dondequieroquesemonte-contenedor mongo\ndocker run -d --name db -v /home/kate/docker/mongo-data:/data/db mongo\ndocker inspect -f '{{ json .Config.Volumes }}' db\ndocker inspect -f '{{ json .Mounts }}' db\n")])])]),n("p",[e._v("El sistema escribe en el sistema operativo y así cuando se mate el contenedor esta información no se pierde.")]),e._v(" "),n("h3",{attrs:{id:"docker-volumes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker-volumes"}},[e._v("#")]),e._v(" Docker "),n("a",{attrs:{href:"https://docs.docker.com/storage/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Volumes"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("Esta herramienta nos permite recuperar datos que podíamos dar por perdido.")]),e._v(" "),n("p",[e._v("Existen tres maneras de hacer permanencia de datos:")]),e._v(" "),n("ul",[n("li",[e._v("Bind mount")]),e._v(" "),n("li",[e._v("Volume")]),e._v(" "),n("li",[e._v("tmpfs mount")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" docker volume ls\n docker volume prune // limpiar volumenes que no estan usando lo contenedores\n docker volume create dbdata\n docker run -d --name db --mount src=nombrevolume,dst=dondemontar mongo\n docker run -d --name db --mount src=dbdata,dst=/data/db mongo\n docker exec -it db bash\n mongo\n exit\n")])])]),n("h3",{attrs:{id:"imagenes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#imagenes"}},[e._v("#")]),e._v(" Imagenes")]),e._v(" "),n("p",[e._v("Imágenes son fundamentalmente plantillas o templates. Una imagen esta construida sobre una capa base y capas por encima")]),e._v(" "),n("ul",[n("li",[e._v("Obtener images")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker pull redis\ndocker image ls\n")])])]),n("ul",[n("li",[e._v("repositorios de docker https://hub.docker.com/")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker pull ubuntu:18.04\n")])])]),n("p",[e._v("Para  crear nuestras propias imágenes, necesitamos un archivo llamado DockerFile que es lo que utiliza Docker para crear imágenes.")]),e._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),n("p",[e._v("Es importante que el DockerFile siempre empiece con un "),n("code",[e._v("FROM")]),e._v(" sino, no va a funcionar.")])]),e._v(" "),n("p",[e._v("El flujo para construir en Docker siempre es así:\nDockerfile –> **build ** –> Imágen –> run --\x3e Contenedor")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker build -t ubuntu:test .\ndocker run -it ubuntu:test .\nls -lac /usr/src\ndocker tag ubuntu:test nilya4/ubuntu:test\ndocker push nilya4/ubuntu:test\n")])])]),n("ul",[n("li",[e._v("Historico imagen")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" docker history ubuntu:test\n")])])]),n("ul",[n("li",[e._v("Herramienta para ver mejor el contenido de una imagen")])]),e._v(" "),n("p",[e._v("https://github.com/wagoodman/dive")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" dive ubuntu:test\n ctrl+u\n")])])]),n("h3",{attrs:{id:"dockerfile-node"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-node"}},[e._v("#")]),e._v(" Dockerfile node")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('FROM node:8\n\nCOPY ["package.json","package-lock.json", "/usr/src/"]\n\nWORKDIR /usr/src\n\nRUN npm install\n\nCOPY [".", "/usr/src/"]\n\nEXPOSE 3000\n\nCMD ["node", "index.js"]\n\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker build -t app .\ndocker run --rm -p 3000:3000 app\n")])])]),n("ul",[n("li",[e._v("Nodemon")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('CMD ["npx", "nodemon", "index.js"]\n\ndocker run --rm -p 3000:3000 {{path}}:/usr/src testapp\n')])])]),n("ul",[n("li",[e._v("Docker networking\nColaboración entre contenedores")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" docker network ls\n docker network create --attachable  testnet\n")])])]),n("p",[n("code",[e._v("--attachable")]),e._v(" permitir que otros contenedores se conecten a esta red")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" docker run -d --name db mongo\n docker network connect testnet db\n docker run -d --name app -p 3000:3000 --env MONGO_URL=mongodb//db:27017/test testapp\n docker network connect testnet app\n docker network rm testnet\n")])])]),n("ul",[n("li",[n("p",[e._v("Docker compose\nEs una herramienta que nos permite describir de forma declarativa la arquitectura de nuestra aplicación, utiliza "),n("strong",[e._v("composefile")]),e._v(" (docker-compose.yml).")])]),e._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://docs.docker.com/compose/install/#install-compose",target:"_blank",rel:"noopener noreferrer"}},[e._v("install"),n("OutboundLink")],1)])]),e._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://docs.docker.com/compose/compose-file/compose-versioning/",target:"_blank",rel:"noopener noreferrer"}},[e._v("version"),n("OutboundLink")],1),e._v("  // version > 2")])]),e._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://docs.docker.com/compose/startup-order/",target:"_blank",rel:"noopener noreferrer"}},[e._v("start"),n("OutboundLink")],1)])]),e._v(" "),n("li",[n("p",[e._v("Services -> componentes de la aplicación, pueden tener mas de un contenedor")])]),e._v(" "),n("li",[n("p",[e._v("image, nombre de la imagen")])]),e._v(" "),n("li",[n("p",[e._v("depende_on, depende de otro servicio")])]),e._v(" "),n("li",[n("p",[e._v("ports: puerto")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('version:  "3"\nservices:\n  app: \n    image: testapp\n    enviroment:\n      MONGO_URL: "mongodb//db:27017/test"\n    depends_on:\n      - db\n    ports:\n      - "3000:3000"\n  db:\n    image: mongo\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker-compose up\ndocker-compose ls\ndocker-compose logs app\ndocker-compose exec app bash\ndocker-compose down\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('version: "3.8"\n\nservices:\n  connect_mongo:\n    build: .\n    environment:\n      MONGO_URL: "mongodb://dbmongo:27017/test"\n    depends_on:\n      - dbmongo\n    ports:\n      - "3000-3010:3000"\n    volumes:\n      - .:/usr/src/\n      - /usr/src/node_modules\n    networks:\n      - app_net\n\n  balancer:\n    image: nginx:latest\n    depends_on:\n      - connect_mongo\n    ports:\n      - "8005:8005"\n    volumes:\n      - {{path}}:/etc/nginx/:ro\n    network_mode: "host"\n  \n  dbmongo:\n    image: mongo\n    networks:\n      - app_net\n\nnetworks:\n  app_net:\n    ipam:\n      driver: default\n      config:\n        - subnet: "172.16.238.0/24"\n\n  \n')])])]),n("ul",[n("li",[n("code",[e._v("build: .")]),e._v(" configuracion del Dockerfile")]),e._v(" "),n("li",[n("code",[e._v("volumes")]),e._v(" descripcion como queremos usar los volumenes\n"),n("ul",[n("li",[n("code",[e._v("/usr/src/node_modules")]),e._v(" para no sobreescribir el node_modules")])])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker-compose up -d //reconfigurar si hay cambios\ndocker-compose scale app-4 //escalar a que tenga 4 contenedores, es necesario poner  un rango de puerto\n")])])]),n("p",[e._v(".dockerignore // para no meter ficheros que no necesito")]),e._v(" "),n("h3",{attrs:{id:"docker-multi-stage"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker-multi-stage"}},[e._v("#")]),e._v(" Docker multi stage")]),e._v(" "),n("p",[e._v("RUN npm install --only=production\nRUN npm install --only=development")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker buil -t app -f build/development.Dockerfile .\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('OPY ["package.json","package-lock.json", "/usr/src/"]\n\nWORKDIR /usr/src\n\nRUN npm install --only=production\n\nCOPY [".", "/usr/src/"]\n\nRUN npm install --only=development\nRUN npm test\n\n\n# Build Stage 2\n# This build takes the production build from staging build\n#\nFROM node:10\n\nCOPY ["package.json","package-lock.json", "/usr/src/"]\n\nWORKDIR /usr/src/app\n\nRUN npm install --only=production\n\nCOPY --from=builder ["/usr/src/index.js", "/usr/src"]\n\nEXPOSE 3000\n\nCMD ["node", "index.js"]\n')])])]),n("p",[n("a",{attrs:{href:"https://hub.docker.com/_/docker/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker hub"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("docker run -it --rm -v /var/run/docker.sock:/var/run/docker.sock docker:18.06.1-ce")]),e._v(" "),n("p",[n("em",[e._v("Notes:")]),e._v(" "),n("em",[e._v("Docker esta escrito en "),n("strong",[e._v("GO")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);